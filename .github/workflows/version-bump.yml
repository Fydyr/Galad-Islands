# ‚ö†Ô∏è  WORKFLOW D√âPR√âCI√â - Utilisation manuelle uniquement
# 
# Ce workflow est conserv√© pour les cas exceptionnels o√π un bump manuel
# est n√©cessaire depuis GitHub Actions. 
#
# ‚úÖ M√âTHODE RECOMMAND√âE : Hooks pre-commit locaux
# Les bumps de version se font automatiquement via les hooks pre-commit
# lors des commits feat/fix/perf/refactor.
#
# üìñ Documentation : docs/dev/version-management.md

name: Manual Version Bump (Legacy)

on:
  # D√©clenchement automatique d√©sactiv√© - utiliser les hooks pre-commit locaux
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type de bump √† effectuer'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      force_changelog:
        description: 'Forcer la r√©g√©n√©ration du changelog complet'
        required: false
        default: false
        type: boolean

jobs:
  bump:
    runs-on: ubuntu-latest
    # Workflow manuel uniquement - les bumps automatiques se font via hooks pre-commit
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Fetch all tags and refs
        run: |
          git fetch --all --tags --force
          git tag --sort=-version:refname

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Commitizen
        run: pip install commitizen

      - name: Set git user
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Display workflow inputs
        run: |
          echo "=== Param√®tres du workflow manuel ==="
          echo "Type de bump: ${{ github.event.inputs.bump_type || 'auto' }}"
          echo "Forcer changelog: ${{ github.event.inputs.force_changelog || 'false' }}"
          echo ""
          echo "‚ö†Ô∏è  ATTENTION: Ce workflow est d√©pr√©ci√©"
          echo "‚úÖ Utilisez plut√¥t les hooks pre-commit locaux pour les bumps automatiques"
          echo "üìñ Voir docs/dev/version-management.md pour plus d'informations"

      - name: Debug information
        run: |
          echo "=== √âtat Git ==="
          git log --oneline -5
          echo -e "\n=== Tags disponibles ==="
          git tag --sort=-version:refname
          echo -e "\n=== Version dans pyproject.toml ==="
          grep "version = " pyproject.toml
          echo -e "\n=== Version commitizen ==="
          cz version --project

      - name: Prepare manual bump
        id: prepare
        run: |
          echo "=== Pr√©paration du bump manuel ==="
          
          # Utiliser le type de bump sp√©cifi√© ou auto
          BUMP_TYPE="${{ github.event.inputs.bump_type || 'auto' }}"
          FORCE_CHANGELOG="${{ github.event.inputs.force_changelog || 'false' }}"
          
          echo "Type de bump demand√©: $BUMP_TYPE"
          echo "Force changelog: $FORCE_CHANGELOG"
          
          # Toujours proc√©der au bump en mode manuel
          echo "bump_needed=true" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "force_changelog=$FORCE_CHANGELOG" >> $GITHUB_OUTPUT
          
          # Afficher les commits r√©cents pour information
          LAST_TAG=$(git tag --sort=-creatordate | head -1)
          if [ -n "$LAST_TAG" ]; then
            echo ""
            echo "Commits depuis le dernier tag ($LAST_TAG):"
            git log $LAST_TAG..HEAD --oneline --color=always || echo "Aucun commit depuis le dernier tag"
          else
            echo "Aucun tag trouv√© - bump initial"
          fi

      - name: Manual version bump
        if: steps.prepare.outputs.bump_needed == 'true'
        run: |
          echo "=== Bump manuel de version ==="
          
          BUMP_TYPE="${{ steps.prepare.outputs.bump_type }}"
          FORCE_CHANGELOG="${{ steps.prepare.outputs.force_changelog }}"
          
          # Forcer la r√©g√©n√©ration du changelog si demand√©
          if [ "$FORCE_CHANGELOG" = "true" ]; then
            echo "üîÑ R√©g√©n√©ration forc√©e du changelog complet..."
            cz changelog
          fi
          
          # Effectuer le bump selon le type demand√©
          if [ "$BUMP_TYPE" = "auto" ]; then
            echo "ü§ñ Bump automatique bas√© sur les commits..."
            if cz bump --yes --changelog; then
              echo "‚úÖ Bump automatique r√©ussi"
            else
              echo "‚ö†Ô∏è Bump automatique √©chou√©, fallback vers patch"
              cz bump --increment patch --yes --changelog
            fi
          else
            echo "üéØ Bump manuel de type: $BUMP_TYPE"
            cz bump --increment "$BUMP_TYPE" --yes --changelog
          fi
          
      - name: Push changes
        if: steps.prepare.outputs.bump_needed == 'true'
        run: |
          echo "üì§ Push des changements et tags..."
          git push --follow-tags origin main
          
          NEW_TAG=$(git tag --sort=-version:refname | head -1)
          echo "üéâ Version $NEW_TAG publi√©e avec succ√®s !"
          echo "üöÄ La release automatique devrait se d√©clencher maintenant"
