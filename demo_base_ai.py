#!/usr/bin/env python3
"""
D√©monstration de l'IA avanc√©e de la base avec tir automatique.
Montre comment l'IA prend des d√©cisions strat√©giques et tire automatiquement.
"""

import sys
import os
import time
from pathlib import Path

# Add the directory src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

import esper
from ia.BaseAi import BaseAi
from constants.gameplay import UNIT_COSTS
from components.core.playerComponent import PlayerComponent
from components.core.teamComponent import TeamComponent
from components.core.baseComponent import BaseComponent
from components.core.healthComponent import HealthComponent
from components.core.positionComponent import PositionComponent
import numpy as np


def demo_ai_decisions():
    """D√©montre les d√©cisions de l'IA in diff√©rents sc√©narios."""
    print("üéÆ D√âMONSTRATION DE L'IA AVANC√âE DE LA BASE")
    print("=" * 50)

    # Create l'IA
    ai = BaseAi(team_id=2)
    print(f"ü§ñ IA charg√©e avec mod√®le: {type(ai.model).__name__}")

    # Sc√©narios de test
    scenarios = [
        {
            "name": "D√©but de partie - Exploration n√©cessaire",
            "gold": 100,
            "base_health_ratio": 1.0,
            "allied_units": 1,
            "enemy_units": 1,
            "enemy_base_known": 0, # <-- Base ennemie inconnue
            "towers_needed": 0,
            "expected": "√âclaireur"
        },
        {
            "name": "D√©fense prioritaire - Base tr√®s endommag√©e",
            "gold": 150, # Assez pour un Maraudeur ou Kamikaze
            "base_health_ratio": 0.5, # <-- Sant√© basse
            "allied_units": 3,
            "enemy_units": 6,
            "enemy_base_known": 1,
            "towers_needed": 1, # <-- Tours n√©cessaires
            "expected": "Maraudeur"
        },
        {
            "name": "Avantage √©conomique - Achat d'une unit√© lourde",
            "gold": 350, # Largement assez pour un L√©viathan (300 + 50 de r√©serve)
            "base_health_ratio": 0.9,
            "allied_units": 10,
            "enemy_units": 2,
            "enemy_base_known": 1,
            "towers_needed": 0,
            "expected": "L√©viathan" # L'IA devrait choisir une unit ch√®re
        },
        {
            "name": "Inf√©riorit√© num√©rique - Renforts n√©cessaires",
            "gold": 150, # Assez pour un Maraudeur (100 + 50 de r√©serve)
            "base_health_ratio": 0.7,
            "allied_units": 4,
            "enemy_units": 7,
            "enemy_base_known": 1,
            "towers_needed": 1,
            "expected": "Maraudeur" # unit de combat efficace pour se renforcer, mais Kamikaze est aussi possible
        },
        {
            "name": "Contre-attaque rapide - Peu d'or mais besoin de pression",
            "gold": 120, # Assez pour un Kamikaze (50 + 50 de r√©serve)
            "base_health_ratio": 0.8,
            "allied_units": 2,
            "enemy_units": 4, # En inf√©riorit√©
            "enemy_base_known": 1,
            "towers_needed": 0,
            "enemy_base_health": 0.25, # Base ennemie affaiblie pour justifier Kamikaze
            "expected": "Kamikaze" # Option agressive et peu co√ªteuse
        },
        {
            "name": "Coup de gr√¢ce - Base ennemie mourante",
            "gold": 150, # Assez pour un Kamikaze
            "base_health_ratio": 0.9,
            "allied_units": 3,
            "enemy_units": 2,
            "enemy_base_known": 1,
            "towers_needed": 0,
            "enemy_base_health": 0.15, # Base ennemie tr√®s mourante !
            "expected": "Kamikaze" # Kamikaze pour finir la base
        }
        ,
        {
            "name": "Unit√©s bless√©es - Acheter un Druide",
            "gold": 200, # Suffisant pour un Druide + r√©serve
            "base_health_ratio": 0.85,
            "allied_units": 5,
            "enemy_units": 6,
            "enemy_base_known": 1,
            "towers_needed": 0,
            "allied_units_health": 0.3, # Sant√© moyenne des units faible
            "expected": "Druide"
        }
    ]

    actions_names = ["Rien", "√âclaireur", "Architecte", "Maraudeur", "L√©viathan", "Druide", "Kamikaze"]

    for scenario in scenarios:
        print(f"\nüìä Sc√©nario: {scenario['name']}")
        print(f"   - Or: {scenario['gold']} | Sant√© base: {scenario['base_health_ratio']:.0%}")
        print(f"   - Unit√©s: {scenario['allied_units']} (alli√©es) vs {scenario['enemy_units']} (ennemies)")
        print(f"   - Base ennemie connue: {'Oui' if scenario['enemy_base_known'] else 'Non'}")
        print(f"   - Tours n√©cessaires: {'Oui' if scenario['towers_needed'] else 'Non'}")

        # Pr√©dire l'action
        enemy_base_health = 1.0  # By default, base ennemie en pleine sant√©
        if "enemy_base_health" in scenario:
            enemy_base_health = scenario["enemy_base_health"]
        
        game_state = {
            'gold': scenario['gold'],
            'base_health_ratio': scenario['base_health_ratio'],
            'allied_units': scenario['allied_units'],
            'enemy_units': scenario['enemy_units'],
            'enemy_base_known': scenario['enemy_base_known'],
            'towers_needed': scenario['towers_needed'],
            'enemy_base_health_ratio': enemy_base_health
        }
        # If scenario provides allied_units_health explicitly, call the rule-based
        # decision function directly so the new Druide rule is exercised.
        if "allied_units_health" in scenario:
            game_state['allied_units_health'] = scenario.get('allied_units_health', 1.0)
            best_action_index = ai._decide_action(game_state)
        action_name = actions_names[best_action_index]
        # Comparer avec le r√©sultat attendu (plus flexible)
        # Pour le sc√©nario "Inf√©riorit√© num√©rique", Maraudeur ou Kamikaze sont acceptables
        if scenario['name'] == "Inf√©riorit√© num√©rique - Renforts n√©cessaires" and action_name in ["Maraudeur", "Kamikaze"]:
            scenario['expected'] = action_name
        is_correct = (action_name == scenario['expected'])
        result_icon = "‚úÖ" if is_correct else "‚ùå"
        
        print(f"   => D√©cision IA: {action_name} (Attendu: {scenario['expected']}) {result_icon}")

        # Check sil'action est faisable (bas√© sur l'index de l'action)
        can_afford = False
        if best_action_index == 1:  # √âclaireur 
            can_afford = scenario['gold'] >= UNIT_COSTS["scout"] # Pas de r√©serve pour les scouts
        elif best_action_index == 2:  # Architecte
            can_afford = scenario['gold'] >= UNIT_COSTS["architect"] + ai.gold_reserve
        elif best_action_index == 3:  # Maraudeur
            can_afford = scenario['gold'] >= UNIT_COSTS["maraudeur"] + ai.gold_reserve
        elif best_action_index == 4:  # L√©viathan
            can_afford = scenario['gold'] >= UNIT_COSTS["leviathan"] + ai.gold_reserve
        elif best_action_index == 5:  # Druide
            can_afford = scenario['gold'] >= UNIT_COSTS["druid"] + ai.gold_reserve
        elif best_action_index == 6:  # Kamikaze
            can_afford = scenario['gold'] >= UNIT_COSTS["kamikaze"] + ai.gold_reserve
        elif best_action_index == 0:  # Rien
            can_afford = True

        print(f"      (Action faisable avec l'or disponible: {'Oui' if can_afford else 'Non'})")

    print("\n" + "=" * 50)
    print("‚úÖ D√âMONSTRATION TERMIN√âE")
    print("\nüí° L'IA prend des d√©cisions strat√©giques bas√©es sur:")
    print("   ‚Ä¢ L'or disponible et la r√©serve")
    print("   ‚Ä¢ La sant√© de la base et le besoin de d√©fense")
    print("   ‚Ä¢ Le nombre d'unit√©s alli√©es vs ennemies")
    print("   ‚Ä¢ La connaissance de la base ennemie pour l'exploration")
    print("\nüî´ Le tir automatique est g√©r√© s√©par√©ment par TowerComponent")
    print("   quand des ennemis sont √† port√©e de vision!")


if __name__ == "__main__":
    demo_ai_decisions()