#!/usr/bin/env python3
"""
Script de lancement des tests pour Galad Islands
Permet de lancer les tests avec diff√©rentes options de configuration
"""

import argparse
import subprocess
import sys
import os
from pathlib import Path

def run_command(cmd, description):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print('='*60)
    print(f"Commande: {' '.join(cmd)}")
    print()

    try:
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path(__file__).parent)

        if result.stdout:
            print("STDOUT:")
            print(result.stdout)

        if result.stderr:
            print("STDERR:")
            print(result.stderr)

        print(f"Code de retour: {result.returncode}")

        return result.returncode == 0

    except Exception as e:
        print(f"Erreur lors de l'ex√©cution: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description="Lanceur de tests pour Galad Islands",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:

  # Lancer tous les tests
  python run_tests.py

  # Lancer seulement les tests unitaires
  python run_tests.py --unit

  # Lancer seulement les tests d'int√©gration
  python run_tests.py --integration

  # Lancer les tests avec couverture
  python run_tests.py --coverage

  # Lancer les tests en mode verbeux
  python run_tests.py --verbose

  # Lancer seulement un fichier de test sp√©cifique
  python run_tests.py --file test_processors.py

  # Lancer les tests de performance
  python run_tests.py --performance

  # G√©n√©rer un rapport HTML de couverture
  python run_tests.py --coverage --html-report
        """
    )

    parser.add_argument('--unit', action='store_true',
                       help='Lancer seulement les tests unitaires')
    parser.add_argument('--integration', action='store_true',
                       help='Lancer seulement les tests d\'int√©gration')
    parser.add_argument('--performance', action='store_true',
                       help='Lancer seulement les tests de performance')
    parser.add_argument('--coverage', action='store_true',
                       help='G√©n√©rer un rapport de couverture')
    parser.add_argument('--html-report', action='store_true',
                       help='G√©n√©rer un rapport HTML de couverture (implique --coverage)')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Mode verbeux')
    parser.add_argument('--file', type=str,
                       help='Lancer seulement un fichier de test sp√©cifique')
    parser.add_argument('--fail-fast', action='store_true',
                       help='Arr√™ter au premier √©chec')
    parser.add_argument('--no-capture', action='store_true',
                       help='Ne pas capturer la sortie (utile pour debug)')

    args = parser.parse_args()

    # V√©rifier que pytest est install√©
    try:
        import pytest
    except ImportError:
        print("‚ùå pytest n'est pas install√©. Installez-le avec:")
        print("   pip install pytest pytest-cov pytest-mock")
        sys.exit(1)

    # Construire la commande pytest
    cmd = [sys.executable, '-m', 'pytest']

    # Options de base depuis pyproject.toml
    # Les options sont d√©j√† configur√©es dans pyproject.toml

    # Filtres par type de test
    if args.unit:
        cmd.extend(['-m', 'unit'])
    elif args.integration:
        cmd.extend(['-m', 'integration'])
    elif args.performance:
        cmd.extend(['-m', 'performance'])

    # Fichier sp√©cifique
    if args.file:
        if not args.file.startswith('test_'):
            args.file = f'test_{args.file}'
        if not args.file.endswith('.py'):
            args.file = f'{args.file}.py'
        cmd.append(f'tests/{args.file}')

    # Options de couverture
    if args.coverage or args.html_report:
        cmd.extend(['--cov=src', '--cov-report=term-missing'])
        if args.html_report:
            cmd.append('--cov-report=html:htmlcov')

    # Options g√©n√©rales
    if args.verbose:
        cmd.append('-v')
    if args.fail_fast:
        cmd.append('-x')
    if args.no_capture:
        cmd.append('-s')

    # Lancer les tests
    success = run_command(cmd, "LANCEMENT DES TESTS GALAD ISLANDS")

    # R√©sum√© final
    print(f"\n{'='*60}")
    if success:
        print("‚úÖ TOUS LES TESTS SONT R√âUSSIS!")
        if args.coverage or args.html_report:
            print("üìä Rapport de couverture g√©n√©r√©")
            if args.html_report:
                print("üåê Rapport HTML disponible dans: htmlcov/index.html")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â!")
        print("   V√©rifiez la sortie ci-dessus pour les d√©tails")
    print('='*60)

    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()