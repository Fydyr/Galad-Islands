"""
IA de la base utilisant un arbre de d√©cision avec scikit-learn.
L'IA d√©cide des actions de la base : achat d'unit√©s, tir, etc.
"""

import esper
import random
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np
import joblib
import os
import time

from src.components.core.baseComponent import BaseComponent
from src.components.core.healthComponent import HealthComponent
from src.components.core.teamComponent import TeamComponent
from src.components.core.playerComponent import PlayerComponent
from src.components.core.positionComponent import PositionComponent
from src.components.core.radiusComponent import RadiusComponent
from src.components.core.classeComponent import ClasseComponent
from src.components.core.towerComponent import TowerComponent
from src.components.core.projectileComponent import ProjectileComponent
from src.constants.gameplay import UNIT_COSTS
from src.factory.unitFactory import UnitFactory
from src.factory.unitType import UnitType
from src.components.core.positionComponent import PositionComponent
from src.constants.team import Team
from src.settings.settings import TILE_SIZE


class BaseAi(esper.Processor):
    """
    IA de la base utilisant un arbre de d√©cision.
    Features: [gold, base_health_ratio, allied_units, enemy_units, enemy_base_known, towers_needed, enemy_base_health_ratio] 
    Actions: 0: rien, 1: √©claireur, 2: architecte, 3: maraudeur, 4: l√©viathan, 5: druide, 6: kamikaze
    """

    UNIT_TYPE_MAPPING = {
        "scout": UnitType.SCOUT,
        "maraudeur": UnitType.MARAUDEUR,
        "leviathan": UnitType.LEVIATHAN,
        "druid": UnitType.DRUID,
        "architect": UnitType.ARCHITECT,
        "kamikaze": UnitType.KAMIKAZE,
        "warrior": UnitType.MARAUDEUR,  # map to maraudeur
        "archer": UnitType.DRUID,  # map to druid
        "mage": UnitType.ARCHITECT,  # map to architect
    }

    def __init__(self, team_id=2):  # 2 pour ennemi par d√©faut (pour l'entra√Ænement)
        self.default_team_id = team_id
        self.gold_reserve = 50  # Garder au moins 50 or en r√©serve (r√©duit pour permettre plus de d√©cisions)
        self.action_cooldown = 5.0  # secondes entre actions (augment√© pour √©viter les changements trop fr√©quents)
        self.last_action_time = 0
        # Flag permettant d'activer/d√©sactiver cette instance d'IA depuis l'ext√©rieur
        self.enabled = True
        self.model = None
        self.load_or_train_model()

    def load_or_train_model(self):
        """Charge le mod√®le ou l'entra√Æne si inexistant."""
        # Priorit√© au mod√®le produit par self-play (final ou dernier it√©ratif)
        selfplay_final = "src/models/base_ai_selfplay_final.pkl"
        # Pattern pour it√©rations (ex: base_ai_selfplay_iter_1.pkl ...)
        selfplay_iter_pattern = "src/models/base_ai_selfplay_iter_*.pkl"

        advanced_model_path = "src/models/base_ai_advanced_model.pkl"
        basic_model_path = "src/models/base_ai_model.pkl"

        # 1) Si un mod√®le self-play final existe, l'utiliser
        if os.path.exists(selfplay_final):
            print("ü§ñ Chargement du mod√®le IA (self-play final)...")
            self.model = joblib.load(selfplay_final)
            print("‚úÖ Mod√®le self-play final charg√© !")
            return

        # 2) Sinon, si des it√©rations self-play existent, choisir la derni√®re par date
        import glob
        iters = glob.glob(selfplay_iter_pattern)
        if iters:
            # choisir le plus r√©cent par timestamp
            latest = max(iters, key=lambda p: os.path.getmtime(p))
            try:
                print(f"ü§ñ Chargement du dernier mod√®le self-play ({os.path.basename(latest)})...")
                self.model = joblib.load(latest)
                print("‚úÖ Mod√®le self-play charg√© !")
                return
            except Exception:
                # continuer vers les autres options si chargement √©choue
                print("‚ö†Ô∏è √âchec du chargement du mod√®le self-play it√©ratif, tentative d'autres mod√®les...")

        # 3) Ensuite tenter le mod√®le avanc√© puis de base
        if os.path.exists(advanced_model_path):
            print("ü§ñ Chargement du mod√®le IA avanc√©...")
            self.model = joblib.load(advanced_model_path)
            print("‚úÖ Mod√®le IA avanc√© charg√© avec succ√®s!")
        elif os.path.exists(basic_model_path):
            print("ü§ñ Chargement du mod√®le IA de base...")
            self.model = joblib.load(basic_model_path)
            print("‚úÖ Mod√®le IA de base charg√©!")
        else:
            print("ü§ñ Aucun mod√®le trouv√©, entra√Ænement d'un nouveau mod√®le...")
            self.train_model()
            os.makedirs("src/models", exist_ok=True)
            joblib.dump(self.model, basic_model_path)
            print("üíæ Nouveau mod√®le sauvegard√©!")

    def train_model(self):
        """Entra√Æne l'arbre de d√©cision sur des donn√©es simul√©es de parties."""
        start_time = time.time()
        print("=" * 60)
        print("üöÄ D√âBUT DE L'ENTRA√éNEMENT DE L'IA DE BASE")
        print("=" * 60)
        
        features = []
        labels = []
        action_counts = [0] * 7 # Compteur pour 7 actions (0-6)
        
        # Simuler plusieurs parties
        n_games = 50
        print(f"üìä Simulation de {n_games} parties d'entra√Ænement...")
        
        for game in range(n_games):
            game_features, game_labels = self.simulate_game()
            features.extend(game_features)
            labels.extend(game_labels)
            
            # Compter les actions
            for action in game_labels:
                action_counts[action] += 1
            
            if (game + 1) % 10 == 0:
                print(f"  ‚úÖ Parties simul√©es: {game + 1}/{n_games}")

        if not features:
            print("‚ö†Ô∏è  Aucune donn√©e d'entra√Ænement g√©n√©r√©e, utilisation du syst√®me de fallback...")
            self.train_with_random_data()
            return

        print(f"üìà Donn√©es collect√©es: {len(features)} exemples d'entra√Ænement")
        print(f"üéØ R√©partition des actions apprises:")
        action_names = ["Rien", "√âclaireur", "Architecte", "Maraudeur", "L√©viathan", "Druide", "Kamikaze"]
        for i, count in enumerate(action_counts):
            if count > 0:
                percentage = (count / sum(action_counts)) * 100
                print(f"   {action_names[i]}: {count} d√©cisions ({percentage:.1f}%)")

        X = np.array(features)
        y = np.array(labels)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        print(f"üîß Entra√Ænement du mod√®le (Decision Tree)...")
        self.model = DecisionTreeRegressor(max_depth=10, random_state=42)
        self.model.fit(X_train, y_train)

        y_pred = self.model.predict(X_test)
        mse = mean_squared_error(y_test, y_pred)
        
        training_time = time.time() - start_time
        
        print(f"‚úÖ Entra√Ænement termin√© en {training_time:.2f} secondes")
        print(f"üéØ Erreur quadratique moyenne: {mse:.3f}")
        
        print("=" * 60)
        print("‚ú® IA DE BASE PR√äTE √Ä JOUER !")
        print("=" * 60)

    def _decide_action_with_logic(self, game_state):
        """Logique de d√©cision √† base de r√®gles (professeur)."""
        gold = game_state['gold']
        base_health = game_state['base_health_ratio']
        allied_units = game_state['allied_units']
        enemy_units = game_state['enemy_units']
        enemy_base_known = game_state['enemy_base_known']
        towers_needed = game_state['towers_needed']
        enemy_base_health = game_state['enemy_base_health_ratio']
        
        # P√©naliser "Rien" si on a de l'or disponible
        if gold >= 30 and random.random() < 0.8:  # 80% de chance d'agir si or >= 30
            # Priorit√© aux √©claireurs si base ennemie inconnue
            if not enemy_base_known and gold >= 30:
                return 1  # √âclaireur
            # D√©fense si base faible
            elif base_health < 0.6 and gold >= 50:
                return 2  # Architecte
            # Attaque si sup√©riorit√© ou base ennemie connue et faible
            elif enemy_base_known and enemy_base_health < 0.4 and gold >= 60:
                return 6  # Kamikaze
            # Unit√©s d'attaque si d√©s√©quilibre
            elif allied_units < enemy_units and gold >= 40:
                return 3  # Maraudeur
            # Unit√©s lourdes si beaucoup d'or
            elif gold >= 100:
                if random.random() < 0.5:
                    return 4  # L√©viathan
                else:
                    return 5  # Druide
            # Sinon, √©claireur ou maraudeur
            elif gold >= 40:
                return 3  # Maraudeur
            else:
                return 1  # √âclaireur
        
        # Rien seulement si pas d'or ou al√©atoirement
        return 0

    def _apply_action_simulation(self, action, game_state):
        """Applique une action en simulation et retourne la r√©compense."""
        gold = game_state['gold']
        reward = -1  # Co√ªt l√©ger par action
        
        if action == 0:
            # P√©nalit√© pour "Rien" si on a de l'or
            if gold >= 30:
                reward -= 5
        elif action == 1 and gold >= 30:  # √âclaireur
            game_state['gold'] -= 30
            game_state['allied_units'] += 1
            game_state['enemy_base_known'] = True
            reward += 10  # R√©compense pour exploration
        elif action == 2 and gold >= 50:  # Architecte
            game_state['gold'] -= 50
            game_state['towers_needed'] -= 1
            reward += 15  # R√©compense pour d√©fense
        elif action == 3 and gold >= 40:  # Maraudeur
            game_state['gold'] -= 40
            game_state['allied_units'] += 1
            reward += 12  # R√©compense pour unit√© d'attaque
        elif action == 4 and gold >= 120:  # L√©viathan
            game_state['gold'] -= 120
            game_state['allied_units'] += 1
            reward += 20  # Grande r√©compense pour unit√© lourde
        elif action == 5 and gold >= 80:  # Druide
            game_state['gold'] -= 80
            game_state['allied_units'] += 1
            reward += 18  # R√©compense pour unit√© de soin
        elif action == 6 and gold >= 60:  # Kamikaze
            game_state['gold'] -= 60
            game_state['enemy_base_health_ratio'] -= 0.2
            reward += 25  # Grande r√©compense pour attaque directe
        
        return reward

    def train_with_random_data(self):
        """Entra√Ænement avec donn√©es al√©atoires (fallback)."""
        n_samples = 1000
        features = []
        labels = []

        for _ in range(n_samples):
            gold = random.randint(0, 2000)
            base_health = random.uniform(0.1, 1.0)
            allied_units = random.randint(0, 20)
            enemy_units = random.randint(0, 20)
            enemy_base_known = random.choice([0, 1])
            towers_needed = random.choice([0, 1])
            enemy_base_health = random.uniform(0.1, 1.0)

            features.append([gold, base_health, allied_units, enemy_units, enemy_base_known, towers_needed, enemy_base_health])

            action = self.decide_action_for_training(gold, base_health, allied_units, enemy_units, towers_needed, enemy_base_known, enemy_base_health)

            labels.append(action)

        X = np.array(features)
        y = np.array(labels)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        self.model = DecisionTreeRegressor(max_depth=10, random_state=42)
        self.model.fit(X_train, y_train)

        y_pred = self.model.predict(X_test)
        print(f"Erreur quadratique moyenne du mod√®le IA base (al√©atoire): {mean_squared_error(y_test, y_pred):.2f}")

    def decide_action_for_training(self, gold, base_health, allied_units, enemy_units, towers_needed, enemy_base_known, enemy_base_health=1.0):
        """Logique de d√©cision simplifi√©e pour l'entra√Ænement - optimis√©e pour r√©ussir les sc√©narios de test."""
        # Priorit√© absolue : se d√©fendre si la base est en danger
        if base_health < 0.6 and towers_needed and gold >= UNIT_COSTS["architect"] + self.gold_reserve:
            return 2  # Acheter un Architecte

        # Priorit√© 2 : exploration si n√©cessaire
        if not enemy_base_known and gold >= UNIT_COSTS["scout"]: # Pas de r√©serve pour les scouts
            return 1  # Acheter un √©claireur pour l'exploration

        # Situation d'urgence : base tr√®s endommag√©e m√™me sans tours n√©cessaires
        if base_health < 0.5 and gold >= UNIT_COSTS["architect"] + self.gold_reserve:
            return 2  # Acheter un Architecte pour se d√©fendre

        # Avantage √©conomique : acheter des unit√©s lourdes si on a beaucoup d'or
        if gold >= 280 and allied_units >= enemy_units:  # Seuil r√©duit pour L√©viathan
            if random.random() < 0.6:  # 60% de chance d'acheter un L√©viathan
                return 4  # L√©viathan
            elif random.random() < 0.5:  # 50% de chance restante d'acheter un Druide
                return 5  # Druide
            else:
                return 3  # Maraudeur

        # Attaque finale : si base ennemie tr√®s endommag√©e et connue
        if enemy_base_known and enemy_base_health < 0.25 and gold >= UNIT_COSTS["kamikaze"] + self.gold_reserve:
            return 6  # Kamikaze pour finir la base ennemie (priorit√© absolue)

        # Inf√©riorit√© num√©rique : se renforcer
        if allied_units < enemy_units:
            if enemy_base_known and gold >= UNIT_COSTS["kamikaze"] + self.gold_reserve:
                return 6  # Kamikaze prioritaire si base connue (attaque directe)
            elif gold >= UNIT_COSTS["maraudeur"] + self.gold_reserve:
                return 3  # Maraudeur prioritaire
            elif gold >= UNIT_COSTS["kamikaze"]:  # Kamikaze moins cher
                return 6  # Kamikaze pour contre-attaque

        # Contre-attaque rapide : si d√©savantage et base ennemie connue
        if allied_units <= enemy_units + 1 and enemy_base_known and gold >= UNIT_COSTS["kamikaze"] + self.gold_reserve:
            if random.random() < 0.7:  # 70% de chance de Kamikaze quand base connue
                return 6  # Kamikaze pour attaquer la base directement

        # Achat d'unit√© √©quilibr√©e si or suffisant
        if gold >= UNIT_COSTS["maraudeur"] + self.gold_reserve:
            return 3  # Maraudeur

        # Achat d'unit√© bon march√© si possible
        if gold >= UNIT_COSTS["kamikaze"] + self.gold_reserve:
            return 6  # Kamikaze

        # Rien si pas assez d'or
        return 0


    def simulate_game(self):
        """Simule une partie pour collecter des donn√©es d'entra√Ænement."""
        # --- SIMULATION COMPL√àTE (V4) ---
        
        # √âtat de d√©part d'une partie standard
        ally_gold = [100]  # Or de d√©part
        ally_base_health = [1.0]
        enemy_base_health = [1.0]
        ally_units = [1]  # 1 √©claireur de d√©part
        enemy_units = [1] # 1 √©claireur de d√©part
        
        # L'IA ne sait pas tout d√®s le d√©but
        enemy_base_known = 0
        
        features = []
        labels = []
        
        # La partie continue tant qu'aucune base n'est d√©truite (ou limite de tours)
        for turn in range(200): # Limite de 200 tours pour √©viter les boucles infinies
            # --- Condition de fin de partie ---
            if ally_base_health[0] <= 0 or enemy_base_health[0] <= 0:
                break

            # --- NOUVELLE LOGIQUE DE PRESSION ---
            enemy_pressure = 0
            unit_disadvantage = enemy_units[0] - ally_units[0]
            
            if unit_disadvantage > 4:
                enemy_pressure = 2
            elif unit_disadvantage > 1:
                enemy_pressure = 1
            
            if ally_base_health[0] < 0.8 and enemy_pressure < 2:
                enemy_pressure += 1

            # Logique de besoin de tours am√©lior√©e
            if ally_base_health[0] < 0.7 or enemy_pressure > 1:
                towers_needed = 1
            else:
                towers_needed = 0

            current_features = [ally_gold[0], ally_base_health[0], ally_units[0], enemy_units[0], enemy_base_known, towers_needed, enemy_base_health[0]]
            features.append(current_features)
            
            action = self.decide_action_for_training(ally_gold[0], ally_base_health[0], ally_units[0], enemy_units[0], towers_needed, enemy_base_known, enemy_base_health[0])
            labels.append(action)
            
            # L'IA ex√©cute son action
            self.apply_simulated_action(action, ally_gold, ally_units, [towers_needed])
            
            # --- √âVOLUTION DU MONDE (entre les d√©cisions de l'IA) ---
            
            # 1. Revenus
            ally_gold[0] += random.randint(15, 30)
            if random.random() < 0.1: ally_gold[0] += random.randint(60, 150)
            if random.random() < 0.03: ally_gold[0] += random.randint(200, 500)

            # 2. Production ennemie
            if random.random() < 0.4:
                enemy_units[0] += random.randint(1, 2)

            # 3. Simulation de combat et de pertes
            if random.random() < 0.7: # 70% de chance qu'un combat ait lieu
                advantage = ally_units[0] - enemy_units[0]
                
                # Pertes alli√©es et d√©g√¢ts √† la base
                loss_chance_ally = 0.25 - 0.05 * advantage
                if random.random() < loss_chance_ally:
                    losses = random.randint(1, max(1, ally_units[0] // 3))
                    ally_units[0] = max(0, ally_units[0] - losses)
                    ally_base_health[0] -= losses * 0.02

                # Pertes ennemies
                loss_chance_enemy = 0.25 + 0.05 * advantage + (0.1 if enemy_base_known else 0) # Bonus d'attaque si base connue
                if random.random() < loss_chance_enemy:
                    losses = random.randint(1, max(1, enemy_units[0] // 3))
                    enemy_units[0] = max(0, enemy_units[0] - losses)
                    ally_gold[0] += losses * (UNIT_COSTS["scout"] // 2)
                    # Les combats pr√®s de la base ennemie l'endommagent
                    if enemy_base_known:
                        enemy_base_health[0] -= losses * 0.02

            # 4. D√©couverte de la base ennemie par les √©claireurs
            if enemy_base_known == 0 and ally_units[0] > 5 and random.random() < 0.2:
                enemy_base_known = 1

            # 5. √âv√©nements al√©atoires (Temp√™tes, Bandits)
            if random.random() < 0.02: # 2% de chance par tour
                # Simule une temp√™te qui endommage quelques unit√©s des deux camps
                ally_units[0] = max(0, ally_units[0] - random.randint(0, 2))
                enemy_units[0] = max(0, enemy_units[0] - random.randint(0, 2))
            if random.random() < 0.01: # 1% de chance par tour
                # Simule une vague de bandits qui met la pression
                ally_base_health[0] -= 0.05

            # 6. Limites de sant√©
            ally_base_health[0] = max(0.1, min(1.0, ally_base_health[0]))
            enemy_base_health[0] = max(0.0, min(1.0, enemy_base_health[0]))
                
        return features, labels

    def apply_simulated_action(self, action, gold, units, towers_needed):
        """Applique une action dans la simulation."""
        if action == 1 and gold[0] >= UNIT_COSTS["scout"]:
            gold[0] -= UNIT_COSTS["scout"] # Pas de r√©serve pour les scouts
            units[0] += 1
        elif action == 2 and gold[0] >= UNIT_COSTS["architect"] + self.gold_reserve:
            gold[0] -= UNIT_COSTS["architect"]
            towers_needed[0] = 0
        elif action == 3 and gold[0] >= UNIT_COSTS["maraudeur"] + self.gold_reserve:
            gold[0] -= UNIT_COSTS["maraudeur"]
            units[0] += 1
        elif action == 4 and gold[0] >= UNIT_COSTS["leviathan"] + self.gold_reserve:
            gold[0] -= UNIT_COSTS["leviathan"]
            units[0] += 1
        elif action == 5 and gold[0] >= UNIT_COSTS["druid"] + self.gold_reserve:
            gold[0] -= UNIT_COSTS["druid"]
            units[0] += 1
        elif action == 6 and gold[0] >= UNIT_COSTS["kamikaze"] + self.gold_reserve:
            gold[0] -= UNIT_COSTS["kamikaze"]
            units[0] += 1

    def process(self, dt: float = 0.016, active_player_team_id: int = 1):
        """Ex√©cute la logique de l'IA de la base √† chaque frame."""
        # Respecter le drapeau d'activation externe
        if not getattr(self, 'enabled', True):
            return
        # L'IA ne doit contr√¥ler que l'√©quipe qui n'est PAS activement jou√©e.
        # Par d√©faut, l'IA est initialis√©e pour l'√©quipe 2 (ennemi).
        # Si le joueur actif est l'√©quipe 2, l'IA ne doit rien faire.
        if self.default_team_id == active_player_team_id:
            return # Ne pas ex√©cuter l'IA pour l'√©quipe du joueur actif

        # D√©terminer quelle √©quipe l'IA doit contr√¥ler
        # Si le joueur contr√¥le les alli√©s (1), l'IA contr√¥le les ennemis (2).
        # Si le joueur contr√¥le les ennemis (2), l'IA contr√¥le les alli√©s (1).
        ai_team_id = Team.ENEMY if active_player_team_id == Team.ALLY else Team.ALLY

        # V√©rifier le cooldown d'action
        self.last_action_time += dt
        if self.last_action_time < self.action_cooldown:
            return

        # Obtenir l'√©tat actuel du jeu
        game_state = self._get_current_game_state(ai_team_id)
        if game_state is None:
            return

        # D√©cider de l'action
        action = self._decide_action(game_state)

        # Afficher la d√©cision en console
        action_names = ["Rien", "√âclaireur", "Architecte", "Maraudeur", "L√©viathan", "Druide", "Kamikaze"]
        print(f"ü§ñ IA Base (√©quipe {ai_team_id}): Action {action} - {action_names[action] if 0 <= action < len(action_names) else 'Inconnue'}")

        # Ex√©cuter l'action
        if self._execute_action(action, ai_team_id):
            self.last_action_time = 0  # Reset cooldown

    def _get_current_game_state(self, ai_team_id: int):
        """R√©cup√®re l'√©tat actuel du jeu pour la prise de d√©cision."""
        try:
            # Trouver la base de cette √©quipe
            base_entity = None
            for ent, (base_comp, team_comp) in esper.get_components(BaseComponent, TeamComponent):
                if team_comp.team_id == ai_team_id:
                    base_entity = ent
                    break

            if base_entity is None:
                return None

            # R√©cup√©rer les informations de la base
            base_health_comp = esper.component_for_entity(base_entity, HealthComponent)
            base_health_ratio = base_health_comp.currentHealth / base_health_comp.maxHealth

            # R√©cup√©rer les informations de la base ennemie
            enemy_base_health_ratio = 1.0  # Par d√©faut, suppos√©e pleine vie
            enemy_team_id = 1 if ai_team_id == 2 else 2
            for ent, (base_comp, team_comp) in esper.get_components(BaseComponent, TeamComponent):
                if team_comp.team_id == enemy_team_id:
                    enemy_base_health_comp = esper.component_for_entity(ent, HealthComponent)
                    enemy_base_health_ratio = enemy_base_health_comp.currentHealth / enemy_base_health_comp.maxHealth
                    break

            # Compter les unit√©s alli√©es et ennemies
            allied_units = 0
            enemy_units = 0

            for ent, (team_comp, health_comp) in esper.get_components(TeamComponent, HealthComponent):
                # Ne pas compter les bases, tours, projectiles
                if esper.has_component(ent, BaseComponent) or esper.has_component(ent, TowerComponent):
                    continue
                if esper.has_component(ent, ProjectileComponent):
                    continue

                if team_comp.team_id == ai_team_id:
                    allied_units += 1
                elif team_comp.team_id != 0:  # √âquipe neutre (mines) = skip
                    enemy_units += 1

            # V√©rifier si la base ennemie est connue (simplifi√© : toujours connue pour l'instant)
            enemy_base_known = 1

            # V√©rifier si des tours sont n√©cessaires (base endommag√©e)
            towers_needed = 1 if base_health_ratio < 0.6 else 0

            # R√©cup√©rer l'or (via PlayerComponent)
            gold = 0
            for ent, (player_comp, team_comp) in esper.get_components(PlayerComponent, TeamComponent):
                if team_comp.team_id == ai_team_id:
                    gold = player_comp.get_gold()
                    break

            return {
                'gold': gold,
                'base_health_ratio': base_health_ratio,
                'allied_units': allied_units,
                'enemy_units': enemy_units,
                'enemy_base_known': enemy_base_known,
                'towers_needed': towers_needed,
                'enemy_base_health_ratio': enemy_base_health_ratio
            }

        except Exception as e:
            print(f"Erreur dans _get_current_game_state: {e}")
            return None

    def _decide_action(self, game_state):
        """D√©cide de l'action √† prendre bas√©e sur l'√©tat du jeu."""
        if self.model is None:
            return 0  # Rien si pas de mod√®le

        try:
            if isinstance(game_state, dict):
                features = [
                    game_state['gold'],
                    game_state['base_health_ratio'],
                    game_state['allied_units'],
                    game_state['enemy_units'],
                    game_state['enemy_base_known'],
                    game_state['towers_needed'],
                    game_state['enemy_base_health_ratio']
                ]
            else:  # list
                features = game_state

            # Calculer Q pour chaque action possible
            q_values = []
            for action in range(7):  # 7 actions
                state_action = features + [action]
                q_value = self.model.predict([state_action])[0]
                q_values.append(q_value)
            
            # Fonction utilitaire pour v√©rifier si l'action est abordable selon la politique
            def is_affordable(action_idx, gold_amount):
                if action_idx == 0:
                    return True
                # co√ªt selon mapping
                action_map = {
                    1: UNIT_COSTS.get('scout', 0),
                    2: UNIT_COSTS.get('architect', 0),
                    3: UNIT_COSTS.get('maraudeur', 0),
                    4: UNIT_COSTS.get('leviathan', 0),
                    5: UNIT_COSTS.get('druid', 0),
                    6: UNIT_COSTS.get('kamikaze', 0),
                }
                cost = action_map.get(action_idx, 0)
                # autoriser l'achat d'un scout sans r√©serve
                reserve = 0 if action_idx == 1 else self.gold_reserve
                return gold_amount >= cost + reserve

            # Choisir l'action avec la plus haute valeur Q
            # Trier les actions par Q d√©croissante et choisir la premi√®re ex√©cutable
            action_order = sorted(range(len(q_values)), key=lambda a: q_values[a], reverse=True)

            # Si toutes les Q-values sont (pratiquement) identiques, appliquer un tie-breaker
            if max(q_values) - min(q_values) < 1e-9:
                # Priorit√© simple : pr√©f√©rer une action non nulle abordable (√©claireur d'abord)
                preferred_actions = [1, 2, 3, 6, 5, 4]
                chosen = 0
                for a in preferred_actions:
                    if is_affordable(a, features[0]):
                        chosen = a
                        break
                print(f"ü§ñ IA Base (√©quipe {self.default_team_id}): Tie-breaker utilis√©, action choisie {chosen}")
                action_names = ["Rien", "√âclaireur", "Architecte", "Maraudeur", "L√©viathan", "Druide", "Kamikaze"]
                print(f"ü§ñ IA Base (√©quipe {self.default_team_id}): Action {chosen} - {action_names[chosen] if 0 <= chosen < len(action_names) else 'Inconnue'}")
                return int(chosen)


            chosen = 0
            for a in action_order:
                if is_affordable(a, features[0]):
                    chosen = a
                    break

            action_names = ["Rien", "√âclaireur", "Architecte", "Maraudeur", "L√©viathan", "Druide", "Kamikaze"]
            print(f"ü§ñ IA Base (√©quipe {self.default_team_id}): Action {chosen} - {action_names[chosen] if 0 <= chosen < len(action_names) else 'Inconnue'}")
            return int(chosen)

        except Exception as e:
            print(f"Erreur dans _decide_action: {e}")
            return 0  # Rien en cas d'erreur

    def _execute_action(self, action, ai_team_id: int):
        """Ex√©cute l'action d√©cid√©e."""
        try:
            # Trouver la base de cette √©quipe
            base_entity = None
            for ent, (base_comp, team_comp) in esper.get_components(BaseComponent, TeamComponent):
                if team_comp.team_id == ai_team_id:
                    base_entity = ent
                    break

            if base_entity is None:
                return False

            # R√©cup√©rer l'or du joueur
            gold = 0
            player_entity = None
            player_comp = None
            for ent, (p_comp, team_comp) in esper.get_components(PlayerComponent, TeamComponent):
                if team_comp.team_id == ai_team_id:
                    gold = p_comp.get_gold()
                    player_entity = ent
                    player_comp = p_comp
                    break

            if player_comp is None:
                return False

            # Refactorisation pour √©viter la duplication
            unit_to_spawn = None
            cost = 0

            # Ex√©cuter l'action
            if action == 1:  # Acheter √©claireur
                unit_to_spawn = UnitType.SCOUT
                cost = UNIT_COSTS["scout"]
            elif action == 2:  # Acheter architecte
                unit_to_spawn = UnitType.ARCHITECT
                cost = UNIT_COSTS["architect"]
            elif action == 3:  # Acheter Maraudeur
                unit_to_spawn = UnitType.MARAUDEUR
                cost = UNIT_COSTS["maraudeur"]
            elif action == 4:  # Acheter L√©viathan
                unit_to_spawn = UnitType.LEVIATHAN
                cost = UNIT_COSTS["leviathan"]
            elif action == 5:  # Acheter Druide
                unit_to_spawn = UnitType.DRUID
                cost = UNIT_COSTS["druid"]
            elif action == 6:  # Acheter Kamikaze
                unit_to_spawn = UnitType.KAMIKAZE
                cost = UNIT_COSTS["kamikaze"]

            if unit_to_spawn:
                # Pour l'ex√©cution, appliquer la r√©serve sauf pour l'√©claireur
                reserve = 0 if action == 1 else self.gold_reserve
                required = cost + reserve

                # V√©rifier via PlayerComponent
                if not player_comp.can_afford(required):
                    # Si c'est un √©claireur et qu'on peut au moins payer son co√ªt, autoriser
                    if action == 1 and player_comp.can_afford(cost):
                        # autoriser
                        pass
                    else:
                        print(f"IA Base (team {ai_team_id}): Pas assez d'or pour action {action} (n√©cessaire: {required}, disponible: {gold})")
                        return False

                # Effectuer l'achat (ne d√©bite que le co√ªt de l'unit√©)
                if player_comp.spend_gold(cost):
                    try:
                        self._spawn_unit(unit_to_spawn, base_entity, ai_team_id)
                    except Exception as e:
                        print(f"Erreur lors du spawn unit: {e}")
                    print(f"IA Base (team {ai_team_id}): Ach√®te {unit_to_spawn}")
                    return True
                else:
                    # Cas rare: can_afford √©tait vrai pour required mais spend_gold √©choue
                    print(f"IA Base (team {ai_team_id}): √âchec d√©pense or pour {unit_to_spawn} (co√ªt {cost})")
                    return False

            # Action 0 (rien) ou action invalide
            return True

        except Exception as e:
            print(f"Erreur dans _execute_action: {e}")
            return False

    def _spawn_unit(self, unit_type, base_entity, ai_team_id: int):
        """Fait appara√Ætre une unit√© depuis la base."""
        try:
            # Utiliser la m√©thode centralis√©e pour obtenir une position de spawn valide
            is_enemy = (ai_team_id == Team.ENEMY)
            spawn_x, spawn_y = BaseComponent.get_spawn_position(is_enemy=is_enemy)

            # Utiliser la factory pour cr√©er l'unit√©
            # UnitFactory attend (unit, enemy, PositionComponent)
            pos = PositionComponent(spawn_x, spawn_y, 0)
            new_entity = UnitFactory(unit_type, is_enemy, pos)

            # Si l'entit√© a bien √©t√© cr√©√©e, l'ajouter √† la base
            if new_entity is not None:
                BaseComponent.add_unit_to_base(new_entity, is_enemy=is_enemy)

        except Exception as e:
            print(f"Erreur dans _spawn_unit: {e}")
