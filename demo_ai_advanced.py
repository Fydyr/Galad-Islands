#!/usr/bin/env python3
"""
D√©monstration de l'IA avanc√©e de la base avec tir automatique.
Montre comment l'IA prend des d√©cisions strat√©giques et tire automatiquement.
"""

import sys
import os
import time
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

import esper
from ia.BaseAi import BaseAi
from constants.gameplay import UNIT_COSTS
from components.core.playerComponent import PlayerComponent
from components.core.teamComponent import TeamComponent
from components.core.baseComponent import BaseComponent
from components.core.healthComponent import HealthComponent
from components.core.positionComponent import PositionComponent


def demo_ai_decisions():
    """D√©montre les d√©cisions de l'IA dans diff√©rents sc√©narios."""
    print("üéÆ D√âMONSTRATION DE L'IA AVANC√âE DE LA BASE")
    print("=" * 50)

    # Cr√©er l'IA
    ai = BaseAi(default_team_id=2)
    print(f"ü§ñ IA charg√©e avec mod√®le: {type(ai.model).__name__}")

    # Sc√©narios de test
    scenarios = [
        {
            "name": "D√©but de partie - Exploration n√©cessaire",
            "gold": 100, # La r√©alit√© du jeu
            "base_health_ratio": 1.0,
            "allied_units": 1,
            "enemy_units": 1,
            "enemy_base_known": 0, # <-- Base ennemie inconnue
            "towers_needed": 0,
            "expected": "√âclaireur"
        },
        {
            "name": "D√©fense prioritaire - Base tr√®s endommag√©e",
            "gold": 250, # Assez pour un architecte (30 + 200 de r√©serve)
            "base_health_ratio": 0.5, # <-- Sant√© basse
            "allied_units": 3,
            "enemy_units": 6,
            "enemy_base_known": 1,
            "towers_needed": 1, # <-- Tours n√©cessaires
            "expected": "Architecte"
        },
        {
            "name": "Avantage √©conomique - Achat d'une unit√© lourde",
            "gold": 300, # Largement assez pour un L√©viathan (40 + 200 de r√©serve)
            "base_health_ratio": 0.9,
            "allied_units": 10,
            "enemy_units": 2,
            "enemy_base_known": 1,
            "towers_needed": 0,
            "expected": "L√©viathan" # L'IA devrait choisir une unit√© ch√®re
        },
        {
            "name": "Inf√©riorit√© num√©rique - Renforts n√©cessaires",
            "gold": 230, # Assez pour un Maraudeur (20 + 200 de r√©serve)
            "base_health_ratio": 0.7,
            "allied_units": 4,
            "enemy_units": 7,
            "enemy_base_known": 1,
            "towers_needed": 1,
            "expected": "Maraudeur" # Unit√© de combat efficace pour se renforcer
        }
    ]

    actions_names = ["Rien", "√âclaireur", "Architecte", "Maraudeur", "L√©viathan", "Druide"]

    for scenario in scenarios:
        print(f"\nüìä Sc√©nario: {scenario['name']}")
        print(f"   - Or: {scenario['gold']} | Sant√© base: {scenario['base_health_ratio']:.0%}")
        print(f"   - Unit√©s: {scenario['allied_units']} (alli√©es) vs {scenario['enemy_units']} (ennemies)")
        print(f"   - Base ennemie connue: {'Oui' if scenario['enemy_base_known'] else 'Non'}")
        print(f"   - Tours n√©cessaires: {'Oui' if scenario['towers_needed'] else 'Non'}")

        # Pr√©dire l'action
        features = [
            scenario['gold'],
            scenario['base_health_ratio'],
            scenario['allied_units'],
            scenario['enemy_units'],
            scenario['enemy_base_known'],
            scenario['towers_needed']
        ]

        action = ai.model.predict([features])[0]
        action_name = actions_names[action] if action < len(actions_names) else "Inconnue"

        # Comparer avec le r√©sultat attendu
        is_correct = (action_name == scenario['expected'])
        result_icon = "‚úÖ" if is_correct else "‚ùå"
        
        print(f"   => D√©cision IA: {action_name} (Attendu: {scenario['expected']}) {result_icon}")

        # V√©rifier si l'action est faisable
        can_afford = False
        if action == 1:  # √âclaireur
            can_afford = scenario['gold'] >= UNIT_COSTS.get("scout", 10) # Pas de r√©serve pour les scouts
        elif action == 2:  # Architecte
            can_afford = scenario['gold'] >= UNIT_COSTS.get("architect", 30) + ai.gold_reserve
        elif action == 3:  # Maraudeur
            can_afford = scenario['gold'] >= UNIT_COSTS.get("maraudeur", 20) + ai.gold_reserve
        elif action == 4:  # L√©viathan
            can_afford = scenario['gold'] >= UNIT_COSTS.get("leviathan", 40) + ai.gold_reserve
        elif action == 5:  # Druide
            can_afford = scenario['gold'] >= UNIT_COSTS.get("druid", 30) + ai.gold_reserve
        elif action == 0:  # Rien
            can_afford = True

        print(f"      (Action faisable avec l'or disponible: {'Oui' if can_afford else 'Non'})")

    print("\n" + "=" * 50)
    print("‚úÖ D√âMONSTRATION TERMIN√âE")
    print("\nüí° L'IA prend des d√©cisions strat√©giques bas√©es sur:")
    print("   ‚Ä¢ L'or disponible et la r√©serve")
    print("   ‚Ä¢ La sant√© de la base et le besoin de d√©fense")
    print("   ‚Ä¢ Le nombre d'unit√©s alli√©es vs ennemies")
    print("   ‚Ä¢ La connaissance de la base ennemie pour l'exploration")
    print("\nüî´ Le tir automatique est g√©r√© s√©par√©ment par TowerComponent")
    print("   quand des ennemis sont √† port√©e de vision!")


if __name__ == "__main__":
    demo_ai_decisions()