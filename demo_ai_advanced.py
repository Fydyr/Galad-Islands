#!/usr/bin/env python3
"""
D√©monstration de l'IA avanc√©e de la base avec tir automatique.
Montre comment l'IA prend des d√©cisions strat√©giques et tire automatiquement.
"""

import sys
import os
import time
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

import esper
from ia.BaseAi import BaseAi
from constants.gameplay import UNIT_COSTS
from components.core.playerComponent import PlayerComponent
from components.core.teamComponent import TeamComponent
from components.core.baseComponent import BaseComponent
from components.core.healthComponent import HealthComponent
from components.core.positionComponent import PositionComponent


def demo_ai_decisions():
    """D√©montre les d√©cisions de l'IA dans diff√©rents sc√©narios."""
    print("üéÆ D√âMONSTRATION DE L'IA AVANC√âE DE LA BASE")
    print("=" * 50)

    # Cr√©er l'IA
    ai = BaseAi(team_id=2)
    print(f"ü§ñ IA charg√©e avec mod√®le: {type(ai.model).__name__}")

    # Sc√©narios de test
    scenarios = [
        {
            "name": "Situation d√©fensive - base endommag√©e",
            "gold": 500,
            "base_health_ratio": 0.3,
            "allied_units": 2,
            "enemy_units": 5,
            "towers_needed": 1
        },
        {
            "name": "Situation √©quilibr√©e",
            "gold": 400,
            "base_health_ratio": 0.8,
            "allied_units": 4,
            "enemy_units": 4,
            "towers_needed": 0
        },
        {
            "name": "Situation offensive - beaucoup d'or",
            "gold": 800,
            "base_health_ratio": 0.9,
            "allied_units": 3,
            "enemy_units": 2,
            "towers_needed": 0
        },
        {
            "name": "Situation pauvre - peu d'or",
            "gold": 50,
            "base_health_ratio": 0.7,
            "allied_units": 1,
            "enemy_units": 3,
            "towers_needed": 0
        }
    ]

    actions_names = ["Rien", "√âclaireur", "Architecte", "Autre unit√©"]

    for scenario in scenarios:
        print(f"\nüìä Sc√©nario: {scenario['name']}")
        print(f"   üí∞ Or: {scenario['gold']} | ‚ù§Ô∏è Sant√© base: {scenario['base_health_ratio']:.1f}")
        print(f"   üë• Unit√©s alli√©es: {scenario['allied_units']} | üë• Unit√©s ennemies: {scenario['enemy_units']}")
        print(f"   üè∞ Tours n√©cessaires: {'Oui' if scenario['towers_needed'] else 'Non'}")

        # Pr√©dire l'action
        features = [
            scenario['gold'],
            scenario['base_health_ratio'],
            scenario['allied_units'],
            scenario['enemy_units'],
            1,  # enemy_base_known
            scenario['towers_needed']
        ]

        action = ai.model.predict([features])[0]
        action_name = actions_names[action] if action < len(actions_names) else "Inconnue"

        print(f"   üéØ D√©cision IA: {action_name} (action {action})")

        # V√©rifier si l'action est faisable
        can_afford = False
        if action == 1:  # √âclaireur
            can_afford = scenario['gold'] >= UNIT_COSTS.get("scout", 50) + ai.gold_reserve
        elif action == 2:  # Architecte
            can_afford = scenario['gold'] >= UNIT_COSTS.get("architect", 300) + ai.gold_reserve
        elif action == 3:  # Autre unit√©
            can_afford = scenario['gold'] >= 300 + ai.gold_reserve  # Co√ªt approximatif
        elif action == 0:  # Rien
            can_afford = True

        print(f"   üí∏ Faisable: {'Oui' if can_afford else 'Non'}")

    print("\n" + "=" * 50)
    print("‚úÖ D√âMONSTRATION TERMIN√âE")
    print("\nüí° L'IA prend des d√©cisions strat√©giques bas√©es sur:")
    print("   ‚Ä¢ L'or disponible et la r√©serve")
    print("   ‚Ä¢ La sant√© de la base")
    print("   ‚Ä¢ Le nombre d'unit√©s alli√©es vs ennemies")
    print("   ‚Ä¢ Le besoin de tours d√©fensives")
    print("\nüî´ Le tir automatique est g√©r√© s√©par√©ment par BaseAttackProcessor")
    print("   quand des ennemis sont √† port√©e de vision!")


if __name__ == "__main__":
    demo_ai_decisions()