#!/usr/bin/env python3
"""
Script de d√©veloppement pour Galad Islands.

Automatise les t√¢ches courantes de d√©veloppement comme les tests,
le formatage du code, et la g√©n√©ration de documentation.
"""

import argparse
import subprocess
import sys
import os
from pathlib import Path

def executer_commande(commande, description):
    """
    Ex√©cute une commande et affiche le r√©sultat.
    
    Args:
        commande: Liste des arguments de la commande
        description: Description de l'action
    """
    print(f"üîß {description}...")
    try:
        resultat = subprocess.run(commande, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} termin√© avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de {description}:")
        print(e.stderr)
        return False

def installer_dependances():
    """Installe les d√©pendances du projet."""
    return executer_commande(
        [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
        "Installation des d√©pendances"
    )

def executer_tests():
    """Ex√©cute tous les tests."""
    return executer_commande(
        [sys.executable, "-m", "pytest", "tests/", "-v"],
        "Ex√©cution des tests"
    )

def executer_tests_coverage():
    """Ex√©cute les tests avec coverage."""
    return executer_commande(
        [sys.executable, "-m", "pytest", "--cov=src", "--cov-report=html", "tests/"],
        "Ex√©cution des tests avec coverage"
    )

def formater_code():
    """Formate le code avec Black."""
    return executer_commande(
        [sys.executable, "-m", "black", "src/", "tests/"],
        "Formatage du code"
    )

def verifier_style():
    """V√©rifie le style avec Flake8."""
    return executer_commande(
        [sys.executable, "-m", "flake8", "src/", "tests/"],
        "V√©rification du style"
    )

def executer_jeu():
    """Lance le jeu."""
    return executer_commande(
        [sys.executable, "main.py"],
        "Lancement du jeu"
    )

def tester_composant(nom_composant):
    """Teste un composant sp√©cifique."""
    return executer_commande(
        [sys.executable, "-m", "pytest", f"tests/components/{nom_composant}/", "-v"],
        f"Tests du composant {nom_composant}"
    )

def verifier_interfaces():
    """V√©rifie la compatibilit√© des interfaces."""
    return executer_commande(
        [sys.executable, "-c", 
         "from src.interfaces import entity_interface, render_interface; print('‚úÖ Interfaces OK')"],
        "V√©rification des interfaces"
    )

def status_composants():
    """Affiche le statut des composants du moteur."""
    composants = ["core", "entities", "renderer", "ai", "physics", "world"]
    print("üìä Status des composants du moteur:")
    
    for composant in composants:
        chemin = Path(f"src/components/{composant}")
        if chemin.exists():
            fichiers = list(chemin.glob("*.py"))
            if fichiers:
                print(f"  {composant:12} : ‚úÖ {len(fichiers)} fichiers")
            else:
                print(f"  {composant:12} : üìÅ dossier cr√©√©")
        else:
            print(f"  {composant:12} : ‚è≥ √† cr√©er")
    
    return True

def nettoyer():
    """Nettoie les fichiers temporaires."""
    patterns_a_supprimer = [
        "**/__pycache__",
        "**/*.pyc", 
        "**/*.pyo",
        ".coverage",
        "htmlcov/",
        ".pytest_cache/",
        "build/",
        "dist/",
        "*.egg-info/"
    ]
    
    print("üßπ Nettoyage des fichiers temporaires...")
    racine = Path(".")
    
    for pattern in patterns_a_supprimer:
        for chemin in racine.glob(pattern):
            if chemin.is_file():
                chemin.unlink()
                print(f"  Supprim√©: {chemin}")
            elif chemin.is_dir():
                import shutil
                shutil.rmtree(chemin)
                print(f"  Supprim√©: {chemin}/")
    
    print("‚úÖ Nettoyage termin√©")
    return True

def main():
    """Point d'entr√©e principal du script."""
    parser = argparse.ArgumentParser(description="Script de d√©veloppement Galad Islands")
    parser.add_argument("--install", action="store_true", help="Installer les d√©pendances")
    parser.add_argument("--test", action="store_true", help="Ex√©cuter les tests")
    parser.add_argument("--test-component", type=str, help="Tester un composant (core, entities, renderer, ai, physics, world)")
    parser.add_argument("--coverage", action="store_true", help="Ex√©cuter les tests avec coverage")
    parser.add_argument("--format", action="store_true", help="Formater le code")
    parser.add_argument("--lint", action="store_true", help="V√©rifier le style")
    parser.add_argument("--run", action="store_true", help="Lancer le jeu")
    parser.add_argument("--clean", action="store_true", help="Nettoyer les fichiers temporaires")
    parser.add_argument("--interfaces", action="store_true", help="V√©rifier les interfaces")
    parser.add_argument("--status", action="store_true", help="Statut des composants")
    parser.add_argument("--all", action="store_true", help="Ex√©cuter toutes les v√©rifications")
    
    args = parser.parse_args()
    
    # Si aucun argument, afficher l'aide
    if not any(vars(args).values()):
        parser.print_help()
        return
    
    # V√©rifier qu'on est dans le bon dossier
    if not Path("src").exists():
        print("‚ùå Ce script doit √™tre ex√©cut√© depuis la racine du projet")
        sys.exit(1)
    
    succes = True
    
    if args.install or args.all:
        succes &= installer_dependances()
    
    if args.format or args.all:
        succes &= formater_code()
    
    if args.lint or args.all:
        succes &= verifier_style()
    
    if args.test or args.all:
        succes &= executer_tests()
    
    if args.test_component:
        succes &= tester_composant(args.test_component)
    
    if args.coverage:
        succes &= executer_tests_coverage()
    
    if args.interfaces or args.all:
        succes &= verifier_interfaces()
    
    if args.status:
        succes &= status_composants()
    
    if args.clean:
        succes &= nettoyer()
    
    if args.run:
        succes &= executer_jeu()
    
    if not succes:
        print("\n‚ùå Certaines op√©rations ont √©chou√©")
        sys.exit(1)
    else:
        print("\n‚úÖ Toutes les op√©rations ont r√©ussi")

if __name__ == "__main__":
    main()